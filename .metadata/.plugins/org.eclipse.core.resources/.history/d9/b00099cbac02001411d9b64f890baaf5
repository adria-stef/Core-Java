package com.hackbulgaria.javacore.pairprogramming;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class PictureAsciiPlayer extends AsciiPlayer {

    PictureAsciiPlayer(File file) {
        super(file);
    }

    private static int blockWidth;

    private BufferedImage createImage(File file) throws IOException {
        BufferedImage image = ImageIO.read(file);
        return image;
        }

    private Color[][] getPixels(BufferedImage image) {
        int imageHeight = image.getHeight();
        int imageWidth = image.getWidth();
        Color[][] pixels = new Color[imageWidth][imageHeight];
        for (int x = 0; x < imageWidth; x++) {
            for (int y = 0; y < imageHeight; y++) {
                int colorInt = image.getRGB(x, y);
                pixels[x][y] = new Color(colorInt, false);
                }
            }
        return pixels;
        }

    private int getIntensity(Color color) {
        int red = color.getRed();
        int green = color.getGreen();
        int blue = color.getBlue();

        return (red + green + blue) / 3;
    }

    private char getChar(int intensity) {
        char result = ' ';

        if (intensity > 240) {
            result = ' ';
        } else if (intensity > 200) {
            result = '.';
        } else if (intensity > 160) {
            result = '*';
        } else if (intensity > 120) {
            result = '+';
        } else if (intensity > 80) {
            result = '=';
        } else if (intensity > 40) {
            result = 'x';
        } else if (intensity > 0) {
            result = '#';
            }
        return result;
        }

    private char[][] renderImage(Color[][] pixels) {
        char[][] result = new char[pixels.length][pixels[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                int intensity = getIntensity(pixels[i][j]);
                result[i][j] = getChar(intensity);
            }
        }
        return result;
        }

    public char[][] renderSmallImage(char[][] pixels) {
        final int defaultSize = 200;
        int imageHeight = pixels.length;
        System.out.println(imageHeight);
        int imageWidth = pixels[0].length;
        System.out.println(imageWidth);
        
        blockWidth = (int) Math.ceil((float) imageWidth / defaultSize);
        // for (int y = 0; y < pixels[0].length; y++) {
        // for (int x = 0; x < pixels.length; x++) {
        // System.out.print(pixels[x][y].getRGB() + " ");
        // }
        // System.out.println();
        // }

        char[][] newPixels = new char[imageWidth / blockWidth][imageHeight / blockWidth + imageHeight % blockWidth];
        for (int x = 0; x < newPixels.length; x++) {
            for (int y = 0; y < newPixels[0].length; y++) {
                int colorInt = getAverageChar(pixels, x, y);
                Color color = new Color(colorInt, false);
                int intensity = getIntensity(color);
                char newChar = getChar(intensity);
                newPixels[x][y] = newChar;
            }
        }
        return newPixels;
    }

    public int getAverageChar(char[][] pixels, int x, int y) {
        int average = 0;
        int numberOfBlocks = 0;
        for (int i = x * blockWidth; i < (x + 1) * blockWidth; i++) {
            for (int j = y * blockWidth; j < (y + 1) * blockWidth; j++) {
                if (i >= 0 && j >= 0 && i < pixels.length && j < pixels[0].length) {
                    numberOfBlocks++;
                    average += pixels[i][j];
                }
            }
        }
        return average / numberOfBlocks;
        // return (int) average;
    }

    private void printRenderedImage(char[][] rendered) {
        for (int y = 0; y < rendered[0].length; y++) {
            for (int x = 0; x < rendered.length; x++) {
                System.out.print(rendered[x][y]);
            }
            System.out.println();
            }
        }

    @Override
    public void play(File file) throws IOException {
        BufferedImage image = createImage(file);
        Color[][] pixels = getPixels(image);
        char[][] bigResult = renderImage(pixels);
        char[][] result = renderSmallImage(bigResult);
        printRenderedImage(result);
        }

    }
