package com.hackbulgaria.corejava.oopfun;

//add, remove, size, get(int elementIndex), getHead (getFirst), getTail(getLast)
public class DoublyLinkedList {

    public Node firstNode;
    public Node lastNode;
    public int numberOfElements = 0;

    public boolean isEmpty() {
        return (numberOfElements == 0);
    }

    public void addFirst(Object a) {
        if (!isEmpty()) {
            Node tempNode = new Node(a);
            tempNode.next = firstNode;
            tempNode.previous = null;
            firstNode = tempNode;
        } else {
            firstNode = new Node(a);
            //
            firstNode.next = lastNode;
            firstNode.previous = null;
        }
        numberOfElements++;
    }

    public void addLast(Object a) {
        if (!isEmpty()) {
            Node tempNode = new Node(a);
            tempNode.previous = lastNode;
            tempNode.next = null;
            lastNode = tempNode;
        } else {
            lastNode = new Node(a);
            //
            lastNode.previous = firstNode;
            lastNode.next = null;
        }
        numberOfElements++;
    }

    public Object removeFirst() {
        Node tempNode = firstNode;
        if (!isEmpty()) {
            firstNode = firstNode.next;
            numberOfElements--;
        } else {
            System.out.println("Cannot remove!! The DoublyLinkedList is empty!!");
        }
        return tempNode;
    }

    public Object removeLast() {
        Node tempNode = lastNode;
        if (!isEmpty()) {
            lastNode = lastNode.previous;

            numberOfElements--;
        } else {
            System.out.println("Cannot remove!! The DoublyLinkedList is empty!!");
        }
        return tempNode;
    }

    public int size() {
        return numberOfElements;
    }

    // public getByIndex (int elementIndex) {
    //
    // }
    //
    public Object getFirst() {
        if (!isEmpty()) {
            return firstNode.item;
        } else {
            System.out.println("Cannot get first!! The DoublyLinkedList is empty!!");
        }
    }

    public Object getLast() {
        return lastNode.item;
    }

}
