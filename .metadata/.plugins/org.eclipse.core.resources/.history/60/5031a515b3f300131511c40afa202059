package com.hackbulgaria.javacore.exam1;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Stack;

public class Utils {

    public static List<Integer> sort(List<Integer> unsortedList) {
        
        List<Integer> sortedList = new ArrayList<>(unsortedList);
        
            int j;
            boolean flag = true;   // set flag to true to begin first pass
            int temp;   //holding variable

            while ( flag )
            {
                   flag= false;    //set flag to false awaiting a possible swap
                   for( j = 0;  j < sortedList.size() - 1;  j++ )
                   {
                          if ( sortedList.get(j) < sortedList.get(j+1) )   // change to > for ascending sort
                          {
                                  temp = sortedList.get(j);                //swap elements
                                  sortedList.set(j, sortedList.get(j + 1));
                                  sortedList.set(j + 1, temp);
                                 flag = true;              //shows a swap occurred 
                         }
                   }
             }
            return sortedList;
        }
        
//        boolean ifSwapped = true;
//
//        int j = 0;
//        
//        while (ifSwapped) {
//        
//            ifSwapped = false;
//            
//            j++;
//            
//            for (int i = 0; i < sortedList.size() - j; i++) {
//                if (sortedList.get(i) > sortedList.get(i + 1)) {
//                    Integer temp = sortedList.get(i);
//                    sortedList.set(i, unsortedList.get(i + 1));
//                    sortedList.set(i + 1, temp);
//                    ifSwapped = true;
//                }
//            }
//
//        }
//       return sortedList;
//    }

    public static List<Integer> reverse(List<Integer> argument) {

        List<Integer> reversedList;
        reversedList = argument;

        Stack<Integer> stackOfInteger = new Stack<>();

        for (Integer item : reversedList) {
            stackOfInteger.push(item);
        }

        reversedList.clear();

        while (!stackOfInteger.isEmpty()) {
            reversedList.add(stackOfInteger.pop());
        }
        return reversedList;
    }

    public static boolean isMonotonic(List<Integer> list) {

        boolean check = false;
        if (list.get(0) < list.get(1)) {
            for (int i = 0; i < list.size() - 1; i++) {
                if (list.get(i) <= list.get(i + 1)) {
                    check = true;
                } else {
                    check = false;
                    break;
                }
            }
            return check;
        } else {
            for (int i = 0; i < list.size() - 1; i++) {
                if (list.get(i) >= list.get(i + 1)) {
                    check = true;
                } else {
                    check = false;
                    break;
                }
            }
            return check;
        }
    }
}